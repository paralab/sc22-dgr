//
// Created by milinda on 1/29/17.
//

/**
 *
 * @author Milinda Fernando
 * School of Computing, University of Utah
 * @brief This file contains the base class for the Rungge-Kutta 45 Method.
 *
 * */

#ifndef SFCSORTBENCH_RK_H
#define SFCSORTBENCH_RK_H

#include "mesh.h"

namespace ode {
    namespace solver {

        class RK {

        protected :

            /** pointer for geometric grid (the grid generated by tree construction and balancing)*/
            ot::Mesh* m_uiMesh;

            /** element (octant) order.   */
            unsigned int m_uiOrder;

            /** number of nodes in 1D element. */
            unsigned int m_uiNrp;

            /** MPI communicator*/
            MPI_Comm m_uiComm;

            /** starting time value for simulation*/
            double m_uiTimeBegin;

            /** Ending time value for simulation*/
            double m_uiTimeEnd;

            /** size of a one time sten*/
            double m_uiT_h;

            /** current time value. */
            double m_uiCurrentTime;

            /** size of the previous time step*/
            double m_uiT_h_prev;

            /** current time step*/
            double m_uiTimeStepCurrent;

            /**current step*/
            unsigned int m_uiCurrentStep;

            /**RK45 stage 1 coefficient*/
            const double RK45_STAGE_1_COEF=16.0/135.0;

            const double RK45_STAGE_1_T=1.0;
            const double RK45_STAGE_1_U=1.0;

            /**RK45 stage 2 coefficient*/
            const double RK45_STAGE_2_COEF=0.0;

            const double RK45_STAGE_2_T=(1.0/4.0);
            const double RK45_STAGE_2_U=(1.0/4.0);

            /**RK45 stage 3 coefficient*/
            const double RK45_STAGE_3_COEF=6656.0/12825.0;

            const double RK45_STAGE_3_T=(3.0/8.0);
            const double RK45_STAGE_3_U1=(3.0/32.0);
            const double RK45_STAGE_3_U2=(9.0/32.0);


            /**RK45 stage 4 coefficient*/
            const double RK45_STAGE_4_COEF=28561.0/56430;
            const double RK45_STAGE_4_T=(12.0/13.0);
            const double RK45_STAGE_4_U1=(1932.0/2197.0);
            const double RK45_STAGE_4_U2=(-7200.0/2197.0);
            const double RK45_STAGE_4_U3=(7296.0/2197.0);

            /**RK45 stage 5 coefficient*/
            const double RK45_STAGE_5_COEF=-9.0/50.0;
            const double RK45_STAGE_5_T=1.0;
            const double RK45_STAGE_5_U1=(439.0/216.0);
            const double RK45_STAGE_5_U2=(-8.0);
            const double RK45_STAGE_5_U3=(3680.0/513.0);
            const double RK45_STAGE_5_U4=(-845.0/4104.0);

            /** RK45 stage 6 coefficient*/
            const double RK45_STAGE_6_COEF=2.0/55.0;
            const double RK45_STAGE_6_T=0.5;
            const double RK45_STAGE_6_U1=(-8.0/27.0);
            const double RK45_STAGE_6_U2=(2.0);
            const double RK45_STAGE_6_U3=(-3544.0/2565.0);
            const double RK45_STAGE_6_U4=(1859.0/4104.0);
            const double RK45_STAGE_6_U5=(-11.0/40.0);

            /** To store the refined oct IDs*/
            std::vector<unsigned int > m_uiRefinedOctIDs;

            /** TO store the coarsened oct IDs*/
            std::vector<unsigned int> m_uiCoarsenOctIDs;



        public:
            /** Constructor initializing minmum required parameters. */
            RK(ot::Mesh * pMesh,double pTBegin,double pTEnd,double pTh);

            ~RK();

            /**stet the begin value for time stepper. *//*
            inline void setTimeStepBegin(double tBegin){m_uiTimeBegin=tBegin;}
            *//**stet the end value for time stepper. *//*
            inline void setTimeStepEnd(double tEnd){m_uiTimeEnd=tEnd;}
            *//** set the current time step*//*
            inline void setCurrentTimeStep(unsigned int step) {m_uiCurrentStep=step;}
            *//** set the current time value *//*
            inline void setCurrentTimeValue(double tValue){m_uiCurrentTime=tValue;}
            *//** set the dt value for the solver*//*
            inline void setDT(double dt){m_uiT_h=dt;}*/



            /** One time step iteration iteration for RK45 update*/
            virtual void performSingleIteration(){};

            /** apply intial conditions*/
            virtual  void applyInitialConditions(){};

            /**function to apply boundary conditions. */
            virtual void applyBoundaryConditions(){};

            virtual void rkSolve(){};
            
            /**@brief free memeory of the mesh*/
            inline void freeMesh(){delete m_uiMesh;};




        };



    } // end of namespace solver

} // end of namespace ode.

#endif //SFCSORTBENCH_RK_H

// generated by Dendro-GR SymPyGR code gernation framework
//date: 2018-10-14 00:09:24
#ifndef RHS_BSSN_CUH 
#define RHS_BSSN_CUH 
#include<iostream>
#include"cuda_runtime.h"
#include<device_launch_parameters.h>
#include "block_cu.h"
#include "params_cu.h"
#include "bssn_rhs_deriv_mem_cuda.h"
#include "cudaUtils.cuh"
#include "derivs.cuh"
#include "cudaUtils.h"
namespace cuda {

/**@brief compute derivs 
 @param[in] __unzipInVar: unzipped input array (global memory) 
 @param[in] MemoryDerivs: allocated workspace for derivative computations 
 @param[in] __dendroBlkList: dendro block list 
 @param[in] __gpuBlockMap: gpu block map  
 @param[in] __deviceProperties: cuda device properties  
*/ 
__device__ void __compute_derivatives(const double**__unzipInVar,MemoryDerivs* __derivWorkspace, const cuda::_Block* dblock, const unsigned int * __gpuBlockMap,const cuda::BSSNComputeParams * __bssnParams,const cudaDeviceProp* __deviceProperties, double* __sm_base, bool* beta0_bool, bool* beta1_bool, bool* beta2_bool,unsigned int stream_id);

/**@brief compute a_rhs 
 @param[in] __unzipInVar: unzipped input array (global memory) 
 @param[in] MemoryDerivs: allocated workspace for derivative computations 
 @param[in] __dendroBlkList: dendro block list 
 @param[in] __gpuBlockMap: gpu block map  
 @param[in] __deviceProperties: cuda device properties  
 @param[out] __unzipOutVar: unzipped output computed rhs  
*/ 
__device__ void __compute_a_rhs(double **__unzipOutVar, const double**__unzipInVar,MemoryDerivs* __derivWorkspace, const cuda::_Block* dblock, const unsigned int * __gpuBlockMap,const cuda::BSSNComputeParams * __bssnParams,const cudaDeviceProp* __deviceProperties, double* __sm_base, unsigned int stream_id);

/**@brief compute b_rhs 
 @param[in] __unzipInVar: unzipped input array (global memory) 
 @param[in] MemoryDerivs: allocated workspace for derivative computations 
 @param[in] __dendroBlkList: dendro block list 
 @param[in] __gpuBlockMap: gpu block map  
 @param[in] __deviceProperties: cuda device properties  
 @param[out] __unzipOutVar: unzipped output computed rhs  
*/ 
__device__ void __compute_b_rhs(double **__unzipOutVar, const double**__unzipInVar,MemoryDerivs* __derivWorkspace, const cuda::_Block* dblock, const unsigned int * __gpuBlockMap,const cuda::BSSNComputeParams * __bssnParams,const cudaDeviceProp* __deviceProperties, double* __sm_base, unsigned int stream_id);

/**@brief compute gt_rhs 
 @param[in] __unzipInVar: unzipped input array (global memory) 
 @param[in] MemoryDerivs: allocated workspace for derivative computations 
 @param[in] __dendroBlkList: dendro block list 
 @param[in] __gpuBlockMap: gpu block map  
 @param[in] __deviceProperties: cuda device properties  
 @param[out] __unzipOutVar: unzipped output computed rhs  
*/ 
__device__ void __compute_gt_rhs(double **__unzipOutVar, const double**__unzipInVar,MemoryDerivs* __derivWorkspace, const cuda::_Block* dblock, const unsigned int * __gpuBlockMap,const cuda::BSSNComputeParams * __bssnParams,const cudaDeviceProp* __deviceProperties, double* __sm_base, unsigned int stream_id);

/**@brief compute chi_rhs 
 @param[in] __unzipInVar: unzipped input array (global memory) 
 @param[in] MemoryDerivs: allocated workspace for derivative computations 
 @param[in] __dendroBlkList: dendro block list 
 @param[in] __gpuBlockMap: gpu block map  
 @param[in] __deviceProperties: cuda device properties  
 @param[out] __unzipOutVar: unzipped output computed rhs  
*/ 
__device__ void __compute_chi_rhs(double **__unzipOutVar, const double**__unzipInVar,MemoryDerivs* __derivWorkspace, const cuda::_Block* dblock, const unsigned int * __gpuBlockMap,const cuda::BSSNComputeParams * __bssnParams,const cudaDeviceProp* __deviceProperties, double* __sm_base, unsigned int stream_id);

/**@brief compute At_rhs 
 @param[in] __unzipInVar: unzipped input array (global memory) 
 @param[in] MemoryDerivs: allocated workspace for derivative computations 
 @param[in] __dendroBlkList: dendro block list 
 @param[in] __gpuBlockMap: gpu block map  
 @param[in] __deviceProperties: cuda device properties  
 @param[out] __unzipOutVar: unzipped output computed rhs  
*/ 
__device__ void __compute_At_rhs(double **__unzipOutVar, const double**__unzipInVar,MemoryDerivs* __derivWorkspace, const cuda::_Block* dblock, const unsigned int * __gpuBlockMap,const cuda::BSSNComputeParams * __bssnParams,const cudaDeviceProp* __deviceProperties, double* __sm_base, unsigned int stream_id);

/**@brief compute K_rhs 
 @param[in] __unzipInVar: unzipped input array (global memory) 
 @param[in] MemoryDerivs: allocated workspace for derivative computations 
 @param[in] __dendroBlkList: dendro block list 
 @param[in] __gpuBlockMap: gpu block map  
 @param[in] __deviceProperties: cuda device properties  
 @param[out] __unzipOutVar: unzipped output computed rhs  
*/ 
__device__ void __compute_K_rhs(double **__unzipOutVar, const double**__unzipInVar,MemoryDerivs* __derivWorkspace, const cuda::_Block* dblock, const unsigned int * __gpuBlockMap,const cuda::BSSNComputeParams * __bssnParams,const cudaDeviceProp* __deviceProperties, double* __sm_base, unsigned int stream_id);

/**@brief compute Gt_rhs 
 @param[in] __unzipInVar: unzipped input array (global memory) 
 @param[in] MemoryDerivs: allocated workspace for derivative computations 
 @param[in] __dendroBlkList: dendro block list 
 @param[in] __gpuBlockMap: gpu block map  
 @param[in] __deviceProperties: cuda device properties  
 @param[out] __unzipOutVar: unzipped output computed rhs  
*/ 
__device__ void __compute_Gt_rhs(double **__unzipOutVar, const double**__unzipInVar,MemoryDerivs* __derivWorkspace, const cuda::_Block* dblock, const unsigned int * __gpuBlockMap,const cuda::BSSNComputeParams * __bssnParams,const cudaDeviceProp* __deviceProperties, double* __sm_base, unsigned int stream_id);

/**@brief compute B_rhs 
 @param[in] __unzipInVar: unzipped input array (global memory) 
 @param[in] MemoryDerivs: allocated workspace for derivative computations 
 @param[in] __dendroBlkList: dendro block list 
 @param[in] __gpuBlockMap: gpu block map  
 @param[in] __deviceProperties: cuda device properties  
 @param[out] __unzipOutVar: unzipped output computed rhs  
*/ 
__device__ void __compute_B_rhs(double **__unzipOutVar, const double**__unzipInVar,MemoryDerivs* __derivWorkspace, const cuda::_Block* dblock, const unsigned int * __gpuBlockMap,const cuda::BSSNComputeParams * __bssnParams,const cudaDeviceProp* __deviceProperties, double* __sm_base, unsigned int stream_id);

/**@brief apply KO dissipation 
 @param[in] __unzipInVar: unzipped input array (global memory) 
 @param[in] MemoryDerivs: allocated workspace for derivative computations 
 @param[in] __dendroBlkList: dendro block list 
 @param[in] __gpuBlockMap: gpu block map  
 @param[in] __deviceProperties: cuda device properties  
 @param[out] __unzipOutVar: unzipped output computed rhs  
*/ 
__device__ void __ko_dissipation(double **__unzipOutVar, const double**__unzipInVar,MemoryDerivs* __derivWorkspace, const cuda::_Block* dblock, const unsigned int * __gpuBlockMap,const cuda::BSSNComputeParams * __bssnParams,const cudaDeviceProp* __deviceProperties, double* __sm_base, unsigned int stream_id);

/**@brief compute RHS 
 @param[in] __unzipInVar: unzipped input array (global memory) 
 @param[in] MemoryDerivs: allocated workspace for derivative computations 
 @param[in] __dendroBlkList: dendro block list 
 @param[in] __gpuBlockMap: gpu block map  
 @param[in] __deviceProperties: cuda device properties  
 @param[out] __unzipOutVar: unzipped output computed rhs  
*/ 
__global__ void __computeBSSNRHS(double **__unzipOutVar, const double**__unzipInVar,MemoryDerivs* __derivWorkspace, const cuda::_Block* __dendroBlkList, const unsigned int * __gpuBlockMap,const cuda::BSSNComputeParams * __bssnParams,const cudaDeviceProp* __deviceProperties, unsigned int stream_id);

}// end of namespace cuda


#endif
